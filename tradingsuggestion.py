# -*- coding: utf-8 -*-
"""TradingSuggestion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WlPo1PzpcP0pGXko-xH6u-ibIzvXHaUR
"""

pip install yfinance pandas numpy matplotlib scikit-learn xgboost

import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler

def compute_rsi(df, window=14):
    delta = df['Close'].diff()
    gain = delta.clip(lower=0)
    loss = -delta.clip(upper=0)
    avg_gain = gain.rolling(window=window).mean()
    avg_loss = loss.rolling(window=window).mean()
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

def add_features(df):
    df = df.copy()
    df['Return'] = df['Close'].pct_change()
    df['SMA_10'] = df['Close'].rolling(window=10).mean()
    df['SMA_50'] = df['Close'].rolling(window=50).mean()
    df['RSI'] = compute_rsi(df)
    df['Signal'] = np.where(df['SMA_10'] > df['SMA_50'], 1, 0)
    df.dropna(inplace=True)
    return df

def train_model_from_file(file_path):
    print(f"Training model on dataset: {file_path}")
    df = pd.read_csv(file_path, parse_dates=['Date'])
    df.set_index('Date', inplace=True)
    df = add_features(df)

    features = ['Close', 'SMA_10', 'SMA_50', 'RSI', 'Return']
    X = df[features]
    y = df['Signal']

    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_scaled, y)
    print("Model training complete.")
    return model, scaler

def give_suggestion(prediction, rsi):
    print("\nTrading Suggestion:")
    if prediction == 1 and rsi < 70:
        print("ðŸŸ¢ Suggestion: BUY")
    elif prediction == 0 and rsi > 65:
        print("ðŸ”´ Suggestion: SELL")
    else:
        print("ðŸŸ¡ Suggestion: HOLD")

def plot_signals(df, predictions):
    df = df.copy()
    df['Predicted Signal'] = predictions
    plt.figure(figsize=(14, 6))
    plt.plot(df['Close'], label='Close Price', color='blue')
    buy_points = df[df['Predicted Signal'] == 1]
    plt.scatter(buy_points.index, buy_points['Close'], label='BUY Signal', marker='^', color='green', s=100)
    plt.title("Predicted Buy Signals")
    plt.xlabel("Date")
    plt.ylabel("Price")
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()

def main():
    predefined_file = "HDFCBANK.NS.csv"  # Change this to your CSV file path
    model, scaler = train_model_from_file(predefined_file)

    ticker = input("Enter stock ticker symbol (e.g. AAPL): ").strip().upper()
    period = input("Enter time period (e.g. 1y, 6mo, 3mo): ").strip()

    print(f"Downloading data for {ticker} over {period}...")
    df_new = yf.download(ticker, period=period)
    if df_new.empty:
        print("No data found for that ticker/period. Try again.")
        return

    df_new = add_features(df_new)
    features = ['Close', 'SMA_10', 'SMA_50', 'RSI', 'Return']
    X_new = df_new[features]


    X_new_scaled = scaler.transform(X_new)

    predictions = model.predict(X_new_scaled)


    latest_pred = predictions[-1]
    latest_rsi = df_new['RSI'].iloc[-1]

    give_suggestion(latest_pred, latest_rsi)
    plot_signals(df_new, predictions)

if __name__ == "__main__":
    main()

